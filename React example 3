import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import "./BlogDetail.css";

function BlogDetail() {
  // Get the blog ID from the URL
  const { id } = useParams();

  // State for the blog data, loading, and error
  const [blog, setBlog] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State for the comments section (this logic remains the same)
  const [comments, setComments] = useState([]);
  const [commentText, setCommentText] = useState("");

  useEffect(() => {
    // Define the async function to fetch the data
    const fetchSingleBlog = async () => {
      try {
        // Use the id from useParams to build the API endpoint URL
        const response = await fetch(`http://127.0.0.1:5000/blogs/${id}`);
        if (!response.ok) {
          throw new Error(`Blog not found or server error.`);
        }
        const data = await response.json();
        setBlog(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchSingleBlog();
  }, [id]); // Dependency array with [id] means this effect re-runs if the id changes

  const handleCommentSubmit = (e) => {
    e.preventDefault();
    if (commentText.trim()) {
      setComments([...comments, commentText]);
      setCommentText("");
    }
  };

  if (loading) {
    return <p>Loading blog post...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  // The existing check works perfectly after loading is complete
  if (!blog) {
    return <p>Blog not found</p>;
  }

  return (
    <div className="blog-detail">
      <h2>{blog.title}</h2>
      <p>By {blog.author}</p>
      {/* <img src={blog.image} alt={blog.title} /> */}
      <p>{blog.content}</p>

      {/* --- Comments section remains the same --- */}
      <div className="comments-section">
        <h3>Comments</h3>
        <form onSubmit={handleCommentSubmit} className="comment-form">
          <textarea
            value={commentText}
            onChange={(e) => setCommentText(e.target.value)}
            placeholder="Add your comment..."
          ></textarea>
          <button type="submit">Post Comment</button>
        </form>
        <div className="comment-list">
          {comments.map((comment, index) => (
            <p key={index} className="comment-item">
              {comment}
            </p>
          ))}
        </div>
      </div>
    </div>
  );
}

export default BlogDetail;
