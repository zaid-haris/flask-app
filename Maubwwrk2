import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import BlogApi from "./BlogApi"; // Assuming BlogApi is in the same directory
import "./BlogDetail.css";

function BlogDetail() {
  const { id } = useParams();
  const [blog, setBlog] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [comments, setComments] = useState([]);
  const [commentText, setCommentText] = useState("");

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [commentError, setCommentError] = useState(null);

  useEffect(() => {
    const fetchSingleBlog = async () => {
      try {
        // Use the BlogApi to fetch the blog post
        const response = await BlogApi.getBlog(id);
        if (!response.ok) {
          throw new Error(`Blog not found or server error.`);
        }
        const data = await response.json();
        setBlog(data);
        if (data.comments) {
          setComments(data.comments);
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchSingleBlog();
  }, [id]);

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (!commentText.trim()) return;

    setIsSubmitting(true);
    setCommentError(null);

    try {
      // --- Use the postComment method from your BlogApi ---
      const response = await BlogApi.postComment(id, commentText);

      if (!response.ok) {
        throw new Error("Failed to post comment.");
      }

      const newComment = await response.json();
      setComments((prevComments) => [newComment, ...prevComments]);
      setCommentText("");
    } catch (err) {
      setCommentError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading) return <p>Loading blog post...</p>;
  if (error) return <p>Error: {error}</p>;
  if (!blog) return <p>Blog not found</p>;

  return (
    <div className="blog-detail">
      <h2>{blog.title}</h2>
      <p>By {blog.author}</p>
      <span>{blog.content}</span>

      <div className="comments-section">
        <h3>Comments</h3>
        <form onSubmit={handleCommentSubmit} className="comment-form">
          <textarea
            value={commentText}
            onChange={(e) => setCommentText(e.target.value)}
            placeholder="Add your comment..."
            required
          ></textarea>
          <button type="submit" disabled={isSubmitting}>
            {isSubmitting ? "Posting..." : "Post Comment"}
          </button>
          {commentError && <p className="error-message">{commentError}</p>}
        </form>

        <div className="comment-list">
          {comments.map((comment) => (
            <div key={comment.id} className="comment-item">
              <strong>{comment.author}:</strong>
              <p>{comment.content}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default BlogDetail;
